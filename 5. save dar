#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <conio.h>
#include <time.h>
#include <math.h>
#include <graphics.h>

int NumberofCells, playername, NumberofCells1, NumberofCells2;
int n;
Move(int x, int y, int chosen_option);
Split_Cell(int player, int index);

struct cell
{
    int x;
    int y;
    char name[1000];
    int cell_energy;
};

struct cells
{
    struct cell cell;
    struct cells* next;
};
//linked list

int CheckifEmpty(int x, int y)
{
    if (locationmap[x][y] == 0)
        return 1;
    else if (locationmap[x][y] == 1)
        return 0;
}
//call this function every time you want to move a cell, and if it returns 0, choose your move again until it returns 1.
//and remember to change the value



char *rand_string(size_t size)
{
    // reserves a place for NULL
    char *str = malloc((size + 1) * sizeof(char));
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (size_t i = 0; i < size; i++)
    {
        int key = rand() % (sizeof(charset) / sizeof(char) - 1);
        str[i] = charset[key];
    }
    str[size] = '\0';
    return str;
}

struct search_list(int index)
{
    struct cells* current = head;
    for (int i=0; i<index; i++)
        current = currnt->next;
    return current;
};
//returns the pointer to the index of cell you want.

showmap_singleplayer()
{

}

struct cells *create_cell(int x1, int y1)
{
    struct node * nn;
    nn = (struct node *) malloc(sizeof(struct node));
    nn->cell->x = x1;
    nn->cell->y = y1;
    nn->cell->name[] = rand_string(2);
    nn->next = NULL;
return nn;
}


int main()
{
    int n,chosen_option;
    FILE *fp;
    fp = fopen("map.bin", "rb");
    if(fp==NULL)
    {
        printf("Cannot read from file\n");
        return -1;
    }
    fread(&n, sizeof(int),1, fp);
    int locationmap[n][n], energymap[n][n];
    unsigned char mode[n][n];
    for (int i=0; i<n; i++)
        for (int j=0; j<n; j++)
            fread(&mode[i][j],sizeof(unsigned char),1,fp);

    //if you don't want to print the binary file, delete from here
    printf("%d\n", n);
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
            printf("%c ",mode[i][j]);
        printf("\n");
    }
    //to here.
    fclose(fp);

    for (int i=0; i<n; i++)
        for (int j=0; j<n; j++)
        {
            if (mode[i][j] == 1)
                energymap[i][j] = 100;
        }
    //initializing the energy map

    for (int i=0; i<n; i++)
        for (int j=0; j<n; j++)
        {
            if (mode[i][j] == 3)
                locationmap[i][j] = 1;
        }
    //initializing forbidden blocks in order to prevent cells from going there.

    time_t t = time(NULL);
    srand(t);

    //the game:
    while (1)
    {
        //first menu
        printf("[1] Load\n[2] New single player game\n[3] New Multiplayer game\n[4] Exit\n");
        scanf("%d", &chosen_option);
        switch (chosen_option)
        {
            case 1:
            {
                //load
            }
            break;
            case 2:
            {
                while (1)
                {
                    printf("How many cells are you going to play with?\n");
                    scanf("%d", &NumberofCells);
                    int x = rand() % n;
                    int y = rand() % n;
                    struct cells * head = create_cell(x,y), *current=head;
                    head -> next = NULL;
                    for (int i=2; i<=NumberofCells; i++)
                    {
                        do
                        {
                            int x = rand() % n;
                            int y = rand() % n;
                        } while (CheckifEmpty(x,y)!=0);
                        locationmap[x][y] = 1;
                        //gets a new random empty x & y for the cell
                        current->next = create_cell(x,y);
                        current=current->next;
                    }
                    //here, you should print the show map function
                    printf("Please choose one of your cells:\n");
                    current = head;
                    for (int i=0; i<NumberofCells; i++)
                    {
                        printf("[%d] %s (%d,%d)\n", i+1, current->cell->name, current->cell->x, current->cell->y);
                        current = current->next;
                    }
                    scanf("%d", &chosen_option);
                    current = search(chosen_option);
                    printf("[1] Move\n[2] Split a cell\n[3] Boost energy\n[4] Save\n[5] Exit\n");
                    scanf("%d", &chosen_option);
                    int index = chosen_option;
                    switch (chosen_option)
                    {
                        case 1:
                        {
                            printf("Choose the direction:\n[1] North\n[2] South\n[3] Northeast\n[4] Northwest\n[5] Southeast\n[6] Southwest\n");
                            scanf("%d",&chosen_option);
                            Move(current->cell->x, current->cell->y, chosen_option);
                        }
                        break;
                        case 2:
                        {
                            //split cell and manage the linked list
                            if (mode[current->cell->x][current->cell->y] == 2)
                            {
                                if (current->cell->cell_energy >= 80)
                                {
                                    Split_Cell (playername, index);
                                }
                                else
                                    printf("%s does not have enough energy. Unfortunately you missed your chance.\n", current->cell->name[])
                            }
                            else
                                printf("(%d, %d) is not a mitosis block. Unfortunately you missed your chance.\n", current->cell->x, current->cell->y);

                        }
                        break;
                        case 3:
                        {
                            if (mode[current->cell->x][current->cell->y] == 1)
                            {
                                if (energymap[current->cell->x][current->cell->y] >= 15)
                                {
                                    if (current->cell->cell_energy+15<=100)
                                    {
                                        energymap[current->cell->x][current->cell->y] -= 15;
                                        current->cell->cell_energy += 15;
                                    }
                                    else
                                    {
                                        energymap[current->cell->x][current->cell->y] -= (100 - current->cell->cell_energy);
                                        current->cell->cell_energy = 100;
                                    }
                                }
                                else
                                {
                                    if (current->cell->cell_energy + energymap[current->cell->x][current->cell->y]<=100)
                                    {
                                        current->cell->cell_energy += energymap[current->cell->x][current->cell->y];
                                        energymap[current->cell->x][current->cell->y]=0;
                                    }
                                    else
                                    {
                                        energymap[current->cell->x][current->cell->y] -= 100 - current->cell->cell_energy;
                                        current->cell->cell_energy = 100;
                                    }
                                }
                            }
                            else
                                printf("(%d, %d) is not an energy block. Unfortunately you missed your chance.\n", current->cell->x, current->cell->y);

                        }
                        break;
                        case 4:
                        {
                            FILE * fp;
                            fopen(fp, "wb");
                            int numberofplayers = 1;
                            fwrite(&numberofplayers, sizeof(int), 1, fp);
                            for (int i=0; i<n; i++)
                                for (int j=0; j<n; j++)
                                    if (mode[i][j] == 1)
                                        fwrite(energymap[i][j], sizeof(int), 1, fp);
                            //energy of blocks respectively
                            for (int i=0; i<n; i++)
                                for (int j=0; j<n; j++)
                                    fwrite(locationmap[i][j], sizeof(int), 1, fp);
                            //emptiness of the map
                            for (int i=0; i<NumberofCells)
                            {

                                fwrite (&(cells->cell->x), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->y), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->cell_energy), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->name), sizeof(char), 2, fp)
                            }
                            //data of cells
                            
                        }
                        break;
                        case 5:
                        {
                            //exit
                            printf("Are you sure you wanna exit the game?\n[1] Yes\n[2] No\n");
                            scanf("%d",&chosen_option);
                            if (chosen_option==1)
                                return 0;
                            else
                                continue;
                        }
                        break;
                    }
                }
            }
            break;
            case 3:
            {
                while (1)
                {
                    playername = 1;
                    printf("Player #%d, how many cells are you going to play with?\n", playername);
                    scanf("%d", &NumberofCells1);
                    int x = rand() % n;
                    int y = rand() % n;
                    struct cells * head = create_cell(x,y), *current=head;
                    head -> next = NULL;
                    for (int i=2; i<=NumberofCells1; i++)
                    {
                        do
                        {
                            int x = rand() % n;
                            int y = rand() % n;
                        } while (CheckifEmpty(x,y)!=0);
                        locationmap[x][y] = 1;
                        //gets a new random empty x & y for the cell
                        current->next = create_cell(x,y);
                        current=current->next;
                    }
                    //here, you should print the show map function
                    printf("Please choose one of your cells:\n");
                    current = head;
                    for (int i=0; i<NumberofCells1; i++)
                    {
                        printf("[%d] %s (%d,%d)\n", i+1, current->cell->name, current->cell->x, current->cell->y);
                        current = current->next;
                    }
                    scanf("%d", &chosen_option);
                    current = search(chosen_option);
                    printf("[1] Move\n[2] Split a cell\n[3] Boost energy\n[4] Save\n[5] Exit\n");
                    scanf("%d", &chosen_option);
                    int index = chosen_option;
                    switch (chosen_option)
                    {
                        case 1:
                        {
                            printf("Choose the direction:\n[1] North\n[2] South\n[3] Northeast\n[4] Northwest\n[5] Southeast\n[6] Southwest\n");
                            scanf("%d",&chosen_option);
                            Move(current->cell->x, current->cell->y, chosen_option);
                        }
                        break;
                        case 2:
                        {
                            //split cell and manage the linked list
                            if (mode[current->cell->x][current->cell->y] == 2)
                            {
                                if (current->cell->cell_energy >= 80)
                                {
                                    Split_Cell (playername, index);
                                }
                                else
                                    printf("%s does not have enough energy. Unfortunately you missed your chance.\n", current->cell->name[])
                            }
                            else
                                printf("(%d, %d) is not a mitosis block. Unfortunately you missed your chance.\n", current->cell->x, current->cell->y);

                        }
                        break;
                        case 3:
                        {
                            if (mode[current->cell->x][current->cell->y] == 1)
                            {
                                if (energymap[current->cell->x][current->cell->y] >= 15)
                                {
                                    if (current->cell->cell_energy+15<=100)
                                    {
                                        energymap[current->cell->x][current->cell->y] -= 15;
                                        current->cell->cell_energy += 15;
                                    }
                                    else
                                    {
                                        energymap[current->cell->x][current->cell->y] -= (100 - current->cell->cell_energy);
                                        current->cell->cell_energy = 100;
                                    }
                                }
                                else
                                {
                                    if (current->cell->cell_energy + energymap[current->cell->x][current->cell->y]<=100)
                                    {
                                        current->cell->cell_energy += energymap[current->cell->x][current->cell->y];
                                        energymap[current->cell->x][current->cell->y]=0;
                                    }
                                    else
                                    {
                                        energymap[current->cell->x][current->cell->y] -= 100 - current->cell->cell_energy;
                                        current->cell->cell_energy = 100;
                                    }
                                }
                            }
                            else
                                printf("(%d, %d) is not an energy block. Unfortunately you missed your chance.\n", current->cell->x, current->cell->y);

                        }
                        break;
                        case 4:
                        {
                            FILE * fp;
                            fopen(fp, "wb");
                            int numberofplayers = 2;
                            fwrite(&numberofplayers, sizeof(int), 1, fp);

                            //for the first player:
                            for (int i=0; i<n; i++)
                                for (int j=0; j<n; j++)
                                    if (mode[i][j] == 1)
                                        fwrite(energymap[i][j], sizeof(int), 1, fp);
                            //energy of blocks respectively
                            for (int i=0; i<n; i++)
                                for (int j=0; j<n; j++)
                                    fwrite(locationmap[i][j], sizeof(int), 1, fp);
                            //emptiness of the map
                            for (int i=0; i<NumberofCells)
                            {

                                fwrite (&(cells->cell->x), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->y), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->cell_energy), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->name), sizeof(char), 2, fp)
                            }
                            //data of cells

                            //for the second player:

                            for (int i=0; i<n; i++)
                                for (int j=0; j<n; j++)
                                    if (mode[i][j] == 1)
                                        fwrite(energymap[i][j], sizeof(int), 1, fp);
                            //energy of blocks respectively
                            for (int i=0; i<n; i++)
                                for (int j=0; j<n; j++)
                                    fwrite(locationmap[i][j], sizeof(int), 1, fp);
                            //emptiness of the map
                            for (int i=0; i<NumberofCells)
                            {

                                fwrite (&(cells->cell->x), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->y), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->cell_energy), sizeof(int), 1, fp)
                                fwrite (&(cells->cell->name), sizeof(char), 2, fp)
                            }
                            //data of cells
                        }
                        break;
                        case 5:
                        {
                            //exit
                            printf("Are you sure you wanna exit the game?\n[1] Yes\n[2] No\n");
                            scanf("%d",&chosen_option);
                            if (chosen_option==1)
                                return 0;
                            else
                                continue;
                        }
                        break;
                    }
                    playername = 2;
                    printf("Player #%d, how many cells are you going to play with?\n", playername);
                    scanf("%d", &NumberofCells2);
                    int x = rand() % n;
                    int y = rand() % n;
                    struct cells * head = create_cell(x,y), *current=head;
                    head -> next = NULL;
                    for (int i=2; i<=NumberofCells2; i++)
                    {
                        do
                        {
                            int x = rand() % n;
                            int y = rand() % n;
                        } while (CheckifEmpty(x,y)!=0);
                        locationmap[x][y] = 1;
                        //gets a new random empty x & y for the cell
                        current->next = create_cell(x,y);
                        current=current->next;
                    }
                    //here, you should print the show map function
                    printf("Please choose one of your cells:\n");
                    current = head;
                    for (int i=0; i<NumberofCells2; i++)
                    {
                        printf("[%d] %s (%d,%d)\n", i+1, current->cell->name, current->cell->x, current->cell->y);
                        current = current->next;
                    }
                    scanf("%d", &chosen_option);
                    current = search(chosen_option);
                    printf("[1] Move\n[2] Split a cell\n[3] Boost energy\n[4] Save\n[5] Exit\n");
                    scanf("%d", &chosen_option);
                    int index = chosen_option;
                    switch (chosen_option)
                    {
                        case 1:
                        {
                            printf("Choose the direction:\n[1] North\n[2] South\n[3] Northeast\n[4] Northwest\n[5] Southeast\n[6] Southwest\n");
                            scanf("%d",&chosen_option);
                            Move(current->cell->x, current->cell->y, chosen_option);
                        }
                        break;
                        case 2:
                        {
                            //split cell and manage the linked list
                            if (mode[current->cell->x][current->cell->y] == 2)
                            {
                                if (current->cell->cell_energy >= 80)
                                {
                                    Split_Cell (playername, index);
                                }
                                else
                                    printf("%s does not have enough energy. Unfortunately you missed your chance.\n", current->cell->name[])
                            }
                            else
                                printf("(%d, %d) is not a mitosis block. Unfortunately you missed your chance.\n", current->cell->x, current->cell->y);

                        }
                        break;
                        case 3:
                        {
                            if (mode[current->cell->x][current->cell->y] == 1)
                            {
                                if (energymap[current->cell->x][current->cell->y] >= 15)
                                {
                                    if (current->cell->cell_energy+15<=100)
                                    {
                                        energymap[current->cell->x][current->cell->y] -= 15;
                                        current->cell->cell_energy += 15;
                                    }
                                    else
                                    {
                                        energymap[current->cell->x][current->cell->y] -= (100 - current->cell->cell_energy);
                                        current->cell->cell_energy = 100;
                                    }
                                }
                                else
                                {
                                    if (current->cell->cell_energy + energymap[current->cell->x][current->cell->y]<=100)
                                    {
                                        current->cell->cell_energy += energymap[current->cell->x][current->cell->y];
                                        energymap[current->cell->x][current->cell->y]=0;
                                    }
                                    else
                                    {
                                        energymap[current->cell->x][current->cell->y] -= 100 - current->cell->cell_energy;
                                        current->cell->cell_energy = 100;
                                    }
                                }
                            }
                            else
                                printf("(%d, %d) is not an energy block. Unfortunately you missed your chance.\n", current->cell->x, current->cell->y);

                        }
                        break;
                        case 4:
                        {
                            //save the current game in a binary file
                        }
                        break;
                        case 5:
                        {
                            //exit
                            printf("Are you sure you wanna exit the game?\n[1] Yes\n[2] No\n");
                            scanf("%d",&chosen_option);
                            if (chosen_option==1)
                                return 0;
                            else
                                continue;
                        }
                        break;
                    }

                }
            }
            break;
            case 4:
            {
                //exit
                printf("Are you sure you wanna exit the game?\n[1] Yes\n[2] No\n");
                scanf("%d", &chosen_option);
                if (chosen_option==1)
                    return 0;
                else
                    continue;
            }
            break;
        }
    }
    return 0;
}

Move(int x, int y, int chosen_option)
{
    switch(chosen_option)
    {
        case 1:
        {
            //north
            if(CheckifEmpty(x,y+1))
            {
                locationmap[x][y+1]=1;
                locationmap[x][y]=0;
            }
            else
                printf("The chosen block is occupied. Unfortunately you missed your chance.=)\n");
        }
        break;

        case 2:
        {
            if(CheckifEmpty(x,y-1))
            {
                locationmap[x][y-1]=1;
                locationmap[x][y]=0;
            }
            else
                printf("The chosen block is occupied. Unfortunately you missed your chance.=)\n");
        }
        break;

        case 3:
        {
            if(CheckifEmpty(x+1,y+1))
            {
                locationmap[x+1][y+1]=1;
                locationmap[x][y]=0;
            }
            else
                printf("The chosen block is occupied. Unfortunately you missed your chance.=)\n");
        }
        break;

        case 4:
        {
            if(CheckifEmpty(x-1,y+1))
            {
                locationmap[x-1][y+1]=1;
                locationmap[x][y]=0;
            }
            else
                printf("The chosen block is occupied. Unfortunately you missed your chance.=)\n");
        }
        break;

        case 5:
        {
            if(CheckifEmpty(x+1,y-1))
            {
                locationmap[x+1][y-1]=1;
                locationmap[x][y]=0;
            }
            else
                printf("The chosen block is occupied. Unfortunately you missed your chance.=)\n");
        }
        break;
        case 6:
        {
            if(CheckifEmpty(x-1,y-1))
            {
                locationmap[x-1][y-1]=1;
                locationmap[x][y]=0;
            }
            else
                printf("The chosen block is occupied. Unfortunately you missed your chance.=)\n");
        }
        break;
    }
}
//moves the cell to the chosen destination. if it is full already, skips the player's turn with proper message.

Split_Cell(int player, int index)
{
    struct cells* second;
    struct cells* original = search(index);

    if (CheckifEmpty(x+1,y+1))
        second = create_cell(x+1,y+1);
    else if (CheckifEmpty(x,y+1))
        second = create_cell(x,y+1);
    else if (CheckifEmpty(x-1,y+1))
        second = create_cell(x-1,y+1);
    else if (CheckifEmpty(x-1,y-1))
        second = create_cell(x-1,y-1);
    else if (CheckifEmpty(x,y-1))
        second = create_cell(x,y-1);
    else if (CheckifEmpty(x+1,y-1))
        second = create_cell(x+1,y-1);
    else
    {
        printf("No cell around is empty. Cannot split the cell.\n");
        return 0;
    }
    second->next = original->next;
    original->next = second;
    second->cell->cell_energy = original->cell->cell_energy = 40;
    return 0;
}
//Splits the cell and if impossible, shows the proper message and exits.


showmap_singleplayer(n)
{
    int k=0;
    for (int i=n; i>0; i--)
    {
        for (int j=0; j<n; j++)
        {
            if(mode[i][j] == 1)
                setfillstyle(3, 12);
            else if (mode[i][j] == 2)
                setfillstyle(3, 14);
            else if (mode[i][j] == 3)
                setfillstyle(3, 0);
            else if (mode[i][j] == 4)
                setfillstyle(3, 1);
            
            char tmp[8];
            if (i%2 == 0)
            {
                bar(i*60 + 1, 60*j + 1, 60 + i*60 ,60 + 60*j);
                if (locationmap[i][j] == 1)
                {
                    outtextxy(2 + i*60, 42 + j*60 , current->cellName);
                    itoa(current->cellEnergy, tmp, 10);
                    outtextxy(40 + i*60, 2 + j*60 , tmp);
                }
                itoa(energymap[i][j], tmp, 10);
                if (current->kind == 1)
                    outtextxy(2 + i*60, 2 + j*60 , tmp);
            }
        }
    }

}
